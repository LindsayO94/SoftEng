package levelBuilder.move;

import javax.swing.undo.UndoableEdit;

import levelBuilder.entity.LevelBuilder;

/**
 * A move class representing a change to the a Tile Frequency 
 * @author August
 *
 */
public class TileFrequencyMove extends Move{

	String newValue;
	int index; 
	int oldTileFrequencies[];
	UndoableEdit undo;
	
	/**
	 * Class constructor
	 * @param newValue: string value of the change
	 * @param index: indicates which tile frequency array index this change effects
	 * @param oldFrequencies: array containing old tile frequencies
	 * @param undo: UndoableEdit generated by the change
	 */
	public TileFrequencyMove(String newValue, int index, int oldFrequencies[], UndoableEdit undo){
		this.newValue = newValue;
		this.index = index;
		this.oldTileFrequencies = oldFrequencies;
		this.undo = undo;
	}
	
	
	/**
	 * checks to see if the move is valid. If the move is valid doMove converts new value string into an appropriate integer. 
	 * Then updates the appropriate attribute in the LevelBuilder's level class.
	 * 
	 * @param editor: the LevelBuilder entity class
	 */
	@Override
	public boolean doMove(LevelBuilder editor) {
		if(valid(editor)){
			int newIntValue;
			if(newValue.matches("")){
				newIntValue = 0;
			}
			else{
				newIntValue = Integer.parseInt(newValue);
			}
			
			
			int newTileFrequencies[] = new int[6];
					
			for(int i = 0; i <6; i++){
				 newTileFrequencies[i] = oldTileFrequencies[i];
			}
			
			newTileFrequencies[index] = newIntValue;
			
			editor.getLevel().setFrequency(newTileFrequencies);
			return true;
		}
		else{
			return false;
		}
		
	}

	/**
	 * Undos the move by setting the appropriate attribute in the LeveBuilder level to oldTileFrequencies and then undoing the change to the corresponding text field.
	 * @param editor: top level level builder entity object.
	 */
	@Override
	public boolean undo(LevelBuilder editor) {
		
		editor.getLevel().setFrequency(oldTileFrequencies);
		undo.undo();	
		
		return true;
	}

	/**
	 * Determines if a move is valid by checking to see if the newValue contains only numerals and the empty string
	 * @param editor: top level level builder entity object.
	 */
	@Override
	public boolean valid(LevelBuilder editor) {
		return newValue.matches("[0-9]+")  || newValue.matches("");
	}

}
